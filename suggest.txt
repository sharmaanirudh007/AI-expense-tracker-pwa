# streamlit_app.py
# Streamlit version of AI Expense Tracker

import streamlit as st
import sqlite3
import os
import json
import dateparser
from datetime import datetime
from google import genai
from google.genai import types

# --- Constants ---
TODAY = datetime.today().strftime("%Y-%m-%d")

# --- Database Functions ---
def init_db():
    conn = sqlite3.connect("expenses.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS expenses (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT NOT NULL,
        category TEXT NOT NULL,
        amount REAL NOT NULL,
        description TEXT,
        created_at TEXT NOT NULL
    )''')
    conn.commit()
    conn.close()


def insert_expense(date, category, amount, description):
    conn = sqlite3.connect("expenses.db")
    c = conn.cursor()
    c.execute('''INSERT INTO expenses (date, category, amount, description, created_at)
                 VALUES (?, ?, ?, ?, ?)''',
              (date, category, amount, description, TODAY))
    conn.commit()
    conn.close()


# --- Parsing Function ---
# def parse_expense(text):
#     prompt = f"""
# You are an assistant that extracts structured data from text related to expenses.
# Extract amount (number), category (string) (if item is provided here instead of general category infer it yourself), description (original input), and date in YYYY-MM-DD format.
# If the date is relative (like 'yesterday', 'today', 'last Sunday'), convert it based on today's date. Make sure all letters should be smallcase.
# Today's date is {TODAY}.

# Text: "{text}"
# Output:
# """
#     try:
#         client = genai.Client(
#             api_key=os.getenv("GOOGLE_API_KEY"),
#             http_options=types.HttpOptions(api_version="v1alpha")
#         )
#         response = client.models.generate_content(
#             model="gemini-2.0-flash-001",
#             contents=prompt
#         )
#         output_raw = response.text.strip()
#         if output_raw.startswith("```"):
#             output_raw = output_raw.strip("```").strip()
#             if output_raw.startswith("json"):
#                 output_raw = output_raw[4:].strip()
#         parsed = json.loads(output_raw)
#         parsed_date = dateparser.parse(parsed["date"], settings={"RELATIVE_BASE": datetime.strptime(TODAY, "%Y-%m-%d")})
#         parsed["date"] = parsed_date.strftime("%Y-%m-%d") if parsed_date else TODAY
#         return float(parsed.get("amount", 0)), parsed.get("category", "other"), parsed.get("description", text), parsed.get("date", TODAY)
#     except Exception as e:
#         st.error(f"Failed to parse with Gemini: {e}")
#         return 0.0, "other", text, TODAY

def parse_expense(text):
    prompt = f"""
You are an assistant that extracts structured data from text related to expenses.
Extract amount (number), category (string) (if item is provided here instead of general category infer it yourself) , description (original input), and date in YYYY-MM-DD format.
If the date is relative (like 'yesterday', 'today', 'last Sunday'), convert it based on today's date. Make sure all letters should be smallcase.
Today's date is {TODAY}.

Text: "{text}"
Output:
"""
    try:
        client = genai.Client(
            api_key=os.getenv('GOOGLE_API_KEY'),
            http_options=types.HttpOptions(api_version='v1alpha')
        )
        response = client.models.generate_content(model='gemini-2.0-flash-001', contents=prompt)
        output_raw = response.text.strip()
        if output_raw.startswith("```"):
            output_raw = output_raw.strip("```").strip()
            if output_raw.startswith("json"):
                output_raw = output_raw[4:].strip()
        parsed = json.loads(output_raw)
        parsed_date = dateparser.parse(parsed["date"], settings={'RELATIVE_BASE': datetime.strptime(TODAY, "%Y-%m-%d")})
        parsed["date"] = parsed_date.strftime("%Y-%m-%d") if parsed_date else TODAY
        print(parsed)
        amount = float(parsed.get("amount", 0))
        category = parsed.get("category", "other")
        description = parsed.get("description", text)
        date = parsed.get("date", TODAY)
        return amount, category, description, date
    except Exception as e:
        print("Failed to parse with Gemini:", e)
        return 0.0, "other", text, TODAY


# --- Streamlit App ---
st.set_page_config(page_title="AI Expense Tracker", layout="centered")
st.title("AI Expense Tracker")

init_db()

with st.form("expense_form"):
    text_input = st.text_area("Speak or type your expense", "I spent 200 on tea yesterday")
    submitted = st.form_submit_button("Add Expense")
    if submitted:
        amount, category, description, date = parse_expense(text_input)
        if amount > 0:
            insert_expense(date, category, amount, description)
            st.success(f"‚úÖ Added ‚Çπ{amount:.2f} to category '{category}' on {date}")
        else:
            st.warning("‚ùó Could not detect a valid amount in the input.")


# --- Expense Analysis ---
st.subheader("üîç Analyze Your Expenses")
query = st.text_input("Ask a question (e.g., How much did I spend on tea yesterday?)")
if st.button("Analyze"):
    try:
        api_key = os.getenv("GOOGLE_API_KEY")
        if not api_key:
            st.error("Google API key not set. Please configure GOOGLE_API_KEY in your environment.")
        else:
            prompt = f"""
You are an expert SQLite assistant. Your task is to convert a natural language question into a single, executable SQLite query for a personal expense tracker.
created_at is when the record is created. Infer value for date from prompt. I might ask question based on description.
Database Schema:
Table: expenses
Columns:
- id (INTEGER, PRIMARY KEY)
- date (TEXT, format 'YYYY-MM-DD')
- category (TEXT)
- amount (REAL)
- description (TEXT),
- created_at (TEXT, format 'YYYY-MM-DD')

Today's date is {TODAY}.
Convert the following natural language question into a syntactically correct SQLite query.
Only output the SQL query and nothing else.

Question: "{query}"
SQL Query:
"""
            client = genai.Client(
                api_key=api_key,
                http_options=types.HttpOptions(api_version="v1alpha")
            )
            response = client.models.generate_content(
                model="gemini-2.0-flash-001",
                contents=prompt
            )
            sql_query = response.text.strip()
            if '```' in sql_query:
                sql_query = sql_query.split('```')[1].strip()
                if sql_query.lower().startswith('sql'):
                    sql_query = sql_query[6:].strip()
            conn = sqlite3.connect("expenses.db")
            c = conn.cursor()
            c.execute(sql_query)
            rows = c.fetchall()
            conn.close()
            if rows:
                st.write("### Results")
                for row in rows:
                    st.write(row)
            else:
                st.info("No results found.")
    except Exception as e:
        st.error(f"Failed to analyze expenses: {e}")
